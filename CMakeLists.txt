cmake_minimum_required(VERSION 3.15)

project(fmtlog CXX)

if(MSVC)
    add_compile_options(/std:c++latest)
else()
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    find_package(Threads REQUIRED)

    add_compile_options(-Wall -O3 -std=c++17)
#    add_compile_options(-Wall -Ofast -std=c++2a -march=native -flto -fno-exceptions -fno-rtti -fno-unwind-tables -fno-asynchronous-unwind-tables -DFMTLOG_NO_CHECK_LEVEL=1)
#    SET(CMAKE_AR  "gcc-ar")
#    SET(CMAKE_RANLIB  "gcc-ranlib")
    link_libraries(pthread)
endif()

if (DEFINED FMT_HEADER_ONLY)
  add_compile_definitions(FMT_HEADER_ONLY)
endif()

link_directories(.)
include_directories(fmt/include)

if (NOT DEFINED FMTLOG_IGNORE_SHARED)
  add_library(fmtlog-shared SHARED fmtlog.cc)
  if(MSVC)
    target_link_libraries(fmtlog-shared fmt)
  endif()
  install(TARGETS fmtlog-shared)
endif()

if (NOT DEFINED FMTLOG_IGNORE_STATIC)
  add_library(fmtlog-static fmtlog.cc)
  if(MSVC)
    target_link_libraries(fmtlog-static fmt)
  endif()
  install(TARGETS fmtlog-static)
endif()

add_subdirectory(fmt)
if (NOT DEFINED FMTLOG_SKIP_TEST_BUILD)
  add_subdirectory(test)
endif()
if(NOT MSVC)
  if (NOT DEFINED FMTLOG_SKIP_BENCHMARKS)
    add_subdirectory(bench)
  endif()
endif()
